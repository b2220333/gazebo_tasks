// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nail_distance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nail_distance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nail_distance_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* NailDistance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NailDistance_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_nail_5fdistance_2eproto() {
  protobuf_AddDesc_nail_5fdistance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nail_distance.proto");
  GOOGLE_CHECK(file != NULL);
  NailDistance_descriptor_ = file->message_type(0);
  static const int NailDistance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailDistance, distance_),
  };
  NailDistance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NailDistance_descriptor_,
      NailDistance::default_instance_,
      NailDistance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailDistance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NailDistance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NailDistance));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nail_5fdistance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NailDistance_descriptor_, &NailDistance::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nail_5fdistance_2eproto() {
  delete NailDistance::default_instance_;
  delete NailDistance_reflection_;
}

void protobuf_AddDesc_nail_5fdistance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023nail_distance.proto\022\027nail_distance_msg"
    "s.msgs\" \n\014NailDistance\022\020\n\010distance\030\001 \002(\010", 80);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nail_distance.proto", &protobuf_RegisterTypes);
  NailDistance::default_instance_ = new NailDistance();
  NailDistance::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nail_5fdistance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nail_5fdistance_2eproto {
  StaticDescriptorInitializer_nail_5fdistance_2eproto() {
    protobuf_AddDesc_nail_5fdistance_2eproto();
  }
} static_descriptor_initializer_nail_5fdistance_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NailDistance::kDistanceFieldNumber;
#endif  // !_MSC_VER

NailDistance::NailDistance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NailDistance::InitAsDefaultInstance() {
}

NailDistance::NailDistance(const NailDistance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NailDistance::SharedCtor() {
  _cached_size_ = 0;
  distance_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NailDistance::~NailDistance() {
  SharedDtor();
}

void NailDistance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NailDistance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NailDistance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NailDistance_descriptor_;
}

const NailDistance& NailDistance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nail_5fdistance_2eproto();
  return *default_instance_;
}

NailDistance* NailDistance::default_instance_ = NULL;

NailDistance* NailDistance::New() const {
  return new NailDistance;
}

void NailDistance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    distance_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NailDistance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool distance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NailDistance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool distance = 1;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->distance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NailDistance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool distance = 1;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->distance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NailDistance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool distance = 1;
    if (has_distance()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NailDistance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NailDistance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NailDistance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NailDistance::MergeFrom(const NailDistance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NailDistance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NailDistance::CopyFrom(const NailDistance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NailDistance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NailDistance::Swap(NailDistance* other) {
  if (other != this) {
    std::swap(distance_, other->distance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NailDistance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NailDistance_descriptor_;
  metadata.reflection = NailDistance_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace nail_distance_msgs

// @@protoc_insertion_point(global_scope)
