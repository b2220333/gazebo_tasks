// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: measure_cut.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "measure_cut.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace measure_cut_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* MeasureCut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeasureCut_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_measure_5fcut_2eproto() {
  protobuf_AddDesc_measure_5fcut_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "measure_cut.proto");
  GOOGLE_CHECK(file != NULL);
  MeasureCut_descriptor_ = file->message_type(0);
  static const int MeasureCut_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureCut, initial_measure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureCut, cut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureCut, action_bottom_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureCut, lasagna_collision_),
  };
  MeasureCut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeasureCut_descriptor_,
      MeasureCut::default_instance_,
      MeasureCut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureCut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureCut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeasureCut));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_measure_5fcut_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeasureCut_descriptor_, &MeasureCut::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_measure_5fcut_2eproto() {
  delete MeasureCut::default_instance_;
  delete MeasureCut_reflection_;
}

void protobuf_AddDesc_measure_5fcut_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021measure_cut.proto\022\025measure_cut_msgs.ms"
    "gs\"f\n\nMeasureCut\022\027\n\017initial_measure\030\001 \002("
    "\010\022\013\n\003cut\030\002 \002(\010\022\027\n\017action_bottom_x\030\003 \002(\001\022"
    "\031\n\021lasagna_collision\030\004 \002(\010", 146);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "measure_cut.proto", &protobuf_RegisterTypes);
  MeasureCut::default_instance_ = new MeasureCut();
  MeasureCut::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_measure_5fcut_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_measure_5fcut_2eproto {
  StaticDescriptorInitializer_measure_5fcut_2eproto() {
    protobuf_AddDesc_measure_5fcut_2eproto();
  }
} static_descriptor_initializer_measure_5fcut_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MeasureCut::kInitialMeasureFieldNumber;
const int MeasureCut::kCutFieldNumber;
const int MeasureCut::kActionBottomXFieldNumber;
const int MeasureCut::kLasagnaCollisionFieldNumber;
#endif  // !_MSC_VER

MeasureCut::MeasureCut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MeasureCut::InitAsDefaultInstance() {
}

MeasureCut::MeasureCut(const MeasureCut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MeasureCut::SharedCtor() {
  _cached_size_ = 0;
  initial_measure_ = false;
  cut_ = false;
  action_bottom_x_ = 0;
  lasagna_collision_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeasureCut::~MeasureCut() {
  SharedDtor();
}

void MeasureCut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MeasureCut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeasureCut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeasureCut_descriptor_;
}

const MeasureCut& MeasureCut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_measure_5fcut_2eproto();
  return *default_instance_;
}

MeasureCut* MeasureCut::default_instance_ = NULL;

MeasureCut* MeasureCut::New() const {
  return new MeasureCut;
}

void MeasureCut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    initial_measure_ = false;
    cut_ = false;
    action_bottom_x_ = 0;
    lasagna_collision_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeasureCut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool initial_measure = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initial_measure_)));
          set_has_initial_measure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cut;
        break;
      }

      // required bool cut = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cut_)));
          set_has_cut();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_action_bottom_x;
        break;
      }

      // required double action_bottom_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_action_bottom_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &action_bottom_x_)));
          set_has_action_bottom_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lasagna_collision;
        break;
      }

      // required bool lasagna_collision = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasagna_collision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lasagna_collision_)));
          set_has_lasagna_collision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MeasureCut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool initial_measure = 1;
  if (has_initial_measure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->initial_measure(), output);
  }

  // required bool cut = 2;
  if (has_cut()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cut(), output);
  }

  // required double action_bottom_x = 3;
  if (has_action_bottom_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->action_bottom_x(), output);
  }

  // required bool lasagna_collision = 4;
  if (has_lasagna_collision()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->lasagna_collision(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MeasureCut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool initial_measure = 1;
  if (has_initial_measure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->initial_measure(), target);
  }

  // required bool cut = 2;
  if (has_cut()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cut(), target);
  }

  // required double action_bottom_x = 3;
  if (has_action_bottom_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->action_bottom_x(), target);
  }

  // required bool lasagna_collision = 4;
  if (has_lasagna_collision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->lasagna_collision(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MeasureCut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool initial_measure = 1;
    if (has_initial_measure()) {
      total_size += 1 + 1;
    }

    // required bool cut = 2;
    if (has_cut()) {
      total_size += 1 + 1;
    }

    // required double action_bottom_x = 3;
    if (has_action_bottom_x()) {
      total_size += 1 + 8;
    }

    // required bool lasagna_collision = 4;
    if (has_lasagna_collision()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeasureCut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeasureCut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeasureCut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeasureCut::MergeFrom(const MeasureCut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initial_measure()) {
      set_initial_measure(from.initial_measure());
    }
    if (from.has_cut()) {
      set_cut(from.cut());
    }
    if (from.has_action_bottom_x()) {
      set_action_bottom_x(from.action_bottom_x());
    }
    if (from.has_lasagna_collision()) {
      set_lasagna_collision(from.lasagna_collision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeasureCut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeasureCut::CopyFrom(const MeasureCut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasureCut::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MeasureCut::Swap(MeasureCut* other) {
  if (other != this) {
    std::swap(initial_measure_, other->initial_measure_);
    std::swap(cut_, other->cut_);
    std::swap(action_bottom_x_, other->action_bottom_x_);
    std::swap(lasagna_collision_, other->lasagna_collision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeasureCut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeasureCut_descriptor_;
  metadata.reflection = MeasureCut_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace measure_cut_msgs

// @@protoc_insertion_point(global_scope)
